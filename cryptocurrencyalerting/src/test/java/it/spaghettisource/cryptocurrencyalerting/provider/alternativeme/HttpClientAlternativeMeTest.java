package it.spaghettisource.cryptocurrencyalerting.provider.alternativeme;

import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import it.spaghettisource.cryptocurrencyalerting.exception.ExceptionFactory;
import it.spaghettisource.cryptocurrencyalerting.i18n.MessageRepository;
import it.spaghettisource.cryptocurrencyalerting.i18n.StringMessageHelper;
import it.spaghettisource.cryptocurrencyalerting.utils.FileUtil;

/**
 * 
 * 
 * @author Alessandro
 *
 */
public class HttpClientAlternativeMeTest {

	
	private ExceptionFactory exceptionFactory = new ExceptionFactory();
	private HttpClientAlternativeMe client;
		
	private String generatedFilePath;
	
	@Before
	public void beforeTest() {
		
		//prepare the exception factory
		MessageRepository messageRepository = new MessageRepository();
		messageRepository.setMessageRepositoryBundleBaseName("it.spaghettisource.cryptocurrencyalerting.provider.coinmarketcap.HttpClientAlternativeMeTest");
		StringMessageHelper helper = new StringMessageHelper();
		helper.setMessageRepository(messageRepository);
		exceptionFactory = new ExceptionFactory();
		exceptionFactory.setMessageHelper(helper);
		
		//create the AlternativeMe client
		String cofigFilePath = System.getProperty("user.dir") +"/src/test/resources/it/spaghettisource/cryptocurrencyalerting/provider/alternativeme";	
		String cofigFileName = "AlternativeMe.properties";
		client = new HttpClientAlternativeMe(exceptionFactory, cofigFilePath, cofigFileName);
		
		//used to store the file generated by the test
		generatedFilePath = System.getProperty("user.dir") +"/src/test/resources/it/spaghettisource/cryptocurrencyalerting/provider/alternativeme";
		
	}
	
	
	@After
	public void afterTest() {
		
		FileUtil.deleteFile(generatedFilePath, "HttpClientAlternativeMeTest_CryptocurrencyListing.json");
		FileUtil.deleteFile(generatedFilePath, "HttpClientAlternativeMeTest_CryptocurrencyTicker.json");		
	}		
	
 	
	@Test
	public void test_OK_CryptocurrencyListing() {
					
		String response = client.doGet("https://api.alternative.me/v2/listings/");

		writeResponseToFile(response, "HttpClientAlternativeMeTest_CryptocurrencyListing.json");
		Assert.assertNotNull(response);
		
	}

	
	@Test
	public void test_OK_CryptocurrencyTicker() {
					
		String cryptocurrency = "bitcoin";
		
		Map<String,String> params = new HashMap<>();
		params.put("convert","EUR");
		
		String response = client.doGet("https://api.alternative.me/v2/ticker/"+cryptocurrency+"/",params);

		writeResponseToFile(response, "HttpClientAlternativeMeTest_CryptocurrencyTicker.json");
		Assert.assertNotNull(response);
		
	}	
	
	
	
	private void writeResponseToFile(String response,String fileName) {

		FileUtil.writeStringToFile(exceptionFactory, generatedFilePath, fileName,response);		
	}
	
	
	
}
